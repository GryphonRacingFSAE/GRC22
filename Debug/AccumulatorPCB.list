
AccumulatorPCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e38  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001f44  08001f44  00011f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f6c  08001f6c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f6c  08001f6c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f6c  08001f6c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f6c  08001f6c  00011f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f70  08001f70  00011f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08001f80  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08001f80  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b2e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017fd  00000000  00000000  00027b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  00029360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007d8  00000000  00000000  00029bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016dca  00000000  00000000  0002a3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008d3e  00000000  00000000  00041172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008592b  00000000  00000000  00049eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf7db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021a8  00000000  00000000  000cf82c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001f2c 	.word	0x08001f2c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001f2c 	.word	0x08001f2c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fae8 	bl	8000724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f820 	bl	8000198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f90a 	bl	8000370 <MX_GPIO_Init>
  MX_CAN_Init();
 800015c:	f000 f8aa 	bl	80002b4 <MX_CAN_Init>
  MX_ADC1_Init();
 8000160:	f000 f86a 	bl	8000238 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000164:	f000 f8da 	bl	800031c <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(A_GPIO_Port, A_Pin);
 8000168:	2108      	movs	r1, #8
 800016a:	480a      	ldr	r0, [pc, #40]	; (8000194 <main+0x48>)
 800016c:	f001 f8ec 	bl	8001348 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000170:	2064      	movs	r0, #100	; 0x64
 8000172:	f000 fb39 	bl	80007e8 <HAL_Delay>
	  HAL_GPIO_TogglePin(B_GPIO_Port, B_Pin);
 8000176:	2110      	movs	r1, #16
 8000178:	4806      	ldr	r0, [pc, #24]	; (8000194 <main+0x48>)
 800017a:	f001 f8e5 	bl	8001348 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800017e:	2064      	movs	r0, #100	; 0x64
 8000180:	f000 fb32 	bl	80007e8 <HAL_Delay>
	  HAL_GPIO_TogglePin(C_GPIO_Port, C_Pin);
 8000184:	2120      	movs	r1, #32
 8000186:	4803      	ldr	r0, [pc, #12]	; (8000194 <main+0x48>)
 8000188:	f001 f8de 	bl	8001348 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800018c:	2064      	movs	r0, #100	; 0x64
 800018e:	f000 fb2b 	bl	80007e8 <HAL_Delay>
	  HAL_GPIO_TogglePin(A_GPIO_Port, A_Pin);
 8000192:	e7e9      	b.n	8000168 <main+0x1c>
 8000194:	40010800 	.word	0x40010800

08000198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b094      	sub	sp, #80	; 0x50
 800019c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001a2:	2228      	movs	r2, #40	; 0x28
 80001a4:	2100      	movs	r1, #0
 80001a6:	4618      	mov	r0, r3
 80001a8:	f001 feb8 	bl	8001f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ac:	f107 0314 	add.w	r3, r7, #20
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
 80001b4:	605a      	str	r2, [r3, #4]
 80001b6:	609a      	str	r2, [r3, #8]
 80001b8:	60da      	str	r2, [r3, #12]
 80001ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	2200      	movs	r2, #0
 80001c0:	601a      	str	r2, [r3, #0]
 80001c2:	605a      	str	r2, [r3, #4]
 80001c4:	609a      	str	r2, [r3, #8]
 80001c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001c8:	2302      	movs	r3, #2
 80001ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001cc:	2301      	movs	r3, #1
 80001ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001d0:	2310      	movs	r3, #16
 80001d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001d4:	2300      	movs	r3, #0
 80001d6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001dc:	4618      	mov	r0, r3
 80001de:	f001 f8cd 	bl	800137c <HAL_RCC_OscConfig>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d001      	beq.n	80001ec <SystemClock_Config+0x54>
  {
    Error_Handler();
 80001e8:	f000 f91a 	bl	8000420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ec:	230f      	movs	r3, #15
 80001ee:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001f0:	2300      	movs	r3, #0
 80001f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f4:	2300      	movs	r3, #0
 80001f6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001f8:	2300      	movs	r3, #0
 80001fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fc:	2300      	movs	r3, #0
 80001fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000200:	f107 0314 	add.w	r3, r7, #20
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f001 fb3a 	bl	8001880 <HAL_RCC_ClockConfig>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000212:	f000 f905 	bl	8000420 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000216:	2302      	movs	r3, #2
 8000218:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800021a:	2300      	movs	r3, #0
 800021c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f001 fcc5 	bl	8001bb0 <HAL_RCCEx_PeriphCLKConfig>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d001      	beq.n	8000230 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800022c:	f000 f8f8 	bl	8000420 <Error_Handler>
  }
}
 8000230:	bf00      	nop
 8000232:	3750      	adds	r7, #80	; 0x50
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b084      	sub	sp, #16
 800023c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	605a      	str	r2, [r3, #4]
 8000246:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000248:	4b18      	ldr	r3, [pc, #96]	; (80002ac <MX_ADC1_Init+0x74>)
 800024a:	4a19      	ldr	r2, [pc, #100]	; (80002b0 <MX_ADC1_Init+0x78>)
 800024c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800024e:	4b17      	ldr	r3, [pc, #92]	; (80002ac <MX_ADC1_Init+0x74>)
 8000250:	2200      	movs	r2, #0
 8000252:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000254:	4b15      	ldr	r3, [pc, #84]	; (80002ac <MX_ADC1_Init+0x74>)
 8000256:	2200      	movs	r2, #0
 8000258:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800025a:	4b14      	ldr	r3, [pc, #80]	; (80002ac <MX_ADC1_Init+0x74>)
 800025c:	2200      	movs	r2, #0
 800025e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000260:	4b12      	ldr	r3, [pc, #72]	; (80002ac <MX_ADC1_Init+0x74>)
 8000262:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000266:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000268:	4b10      	ldr	r3, [pc, #64]	; (80002ac <MX_ADC1_Init+0x74>)
 800026a:	2200      	movs	r2, #0
 800026c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800026e:	4b0f      	ldr	r3, [pc, #60]	; (80002ac <MX_ADC1_Init+0x74>)
 8000270:	2201      	movs	r2, #1
 8000272:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000274:	480d      	ldr	r0, [pc, #52]	; (80002ac <MX_ADC1_Init+0x74>)
 8000276:	f000 fadb 	bl	8000830 <HAL_ADC_Init>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000280:	f000 f8ce 	bl	8000420 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000284:	2306      	movs	r3, #6
 8000286:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000288:	2301      	movs	r3, #1
 800028a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800028c:	2300      	movs	r3, #0
 800028e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	4619      	mov	r1, r3
 8000294:	4805      	ldr	r0, [pc, #20]	; (80002ac <MX_ADC1_Init+0x74>)
 8000296:	f000 fba3 	bl	80009e0 <HAL_ADC_ConfigChannel>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002a0:	f000 f8be 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002a4:	bf00      	nop
 80002a6:	3710      	adds	r7, #16
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000028 	.word	0x20000028
 80002b0:	40012400 	.word	0x40012400

080002b4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80002b8:	4b16      	ldr	r3, [pc, #88]	; (8000314 <MX_CAN_Init+0x60>)
 80002ba:	4a17      	ldr	r2, [pc, #92]	; (8000318 <MX_CAN_Init+0x64>)
 80002bc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80002be:	4b15      	ldr	r3, [pc, #84]	; (8000314 <MX_CAN_Init+0x60>)
 80002c0:	2210      	movs	r2, #16
 80002c2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002c4:	4b13      	ldr	r3, [pc, #76]	; (8000314 <MX_CAN_Init+0x60>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002ca:	4b12      	ldr	r3, [pc, #72]	; (8000314 <MX_CAN_Init+0x60>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80002d0:	4b10      	ldr	r3, [pc, #64]	; (8000314 <MX_CAN_Init+0x60>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80002d6:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <MX_CAN_Init+0x60>)
 80002d8:	2200      	movs	r2, #0
 80002da:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002dc:	4b0d      	ldr	r3, [pc, #52]	; (8000314 <MX_CAN_Init+0x60>)
 80002de:	2200      	movs	r2, #0
 80002e0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002e2:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <MX_CAN_Init+0x60>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002e8:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <MX_CAN_Init+0x60>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <MX_CAN_Init+0x60>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002f4:	4b07      	ldr	r3, [pc, #28]	; (8000314 <MX_CAN_Init+0x60>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80002fa:	4b06      	ldr	r3, [pc, #24]	; (8000314 <MX_CAN_Init+0x60>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000300:	4804      	ldr	r0, [pc, #16]	; (8000314 <MX_CAN_Init+0x60>)
 8000302:	f000 fca6 	bl	8000c52 <HAL_CAN_Init>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800030c:	f000 f888 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000310:	bf00      	nop
 8000312:	bd80      	pop	{r7, pc}
 8000314:	20000058 	.word	0x20000058
 8000318:	40006400 	.word	0x40006400

0800031c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000320:	4b11      	ldr	r3, [pc, #68]	; (8000368 <MX_USART1_UART_Init+0x4c>)
 8000322:	4a12      	ldr	r2, [pc, #72]	; (800036c <MX_USART1_UART_Init+0x50>)
 8000324:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000326:	4b10      	ldr	r3, [pc, #64]	; (8000368 <MX_USART1_UART_Init+0x4c>)
 8000328:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800032c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800032e:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <MX_USART1_UART_Init+0x4c>)
 8000330:	2200      	movs	r2, #0
 8000332:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000334:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <MX_USART1_UART_Init+0x4c>)
 8000336:	2200      	movs	r2, #0
 8000338:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800033a:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <MX_USART1_UART_Init+0x4c>)
 800033c:	2200      	movs	r2, #0
 800033e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000340:	4b09      	ldr	r3, [pc, #36]	; (8000368 <MX_USART1_UART_Init+0x4c>)
 8000342:	220c      	movs	r2, #12
 8000344:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000346:	4b08      	ldr	r3, [pc, #32]	; (8000368 <MX_USART1_UART_Init+0x4c>)
 8000348:	2200      	movs	r2, #0
 800034a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <MX_USART1_UART_Init+0x4c>)
 800034e:	2200      	movs	r2, #0
 8000350:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000352:	4805      	ldr	r0, [pc, #20]	; (8000368 <MX_USART1_UART_Init+0x4c>)
 8000354:	f001 fce2 	bl	8001d1c <HAL_UART_Init>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800035e:	f000 f85f 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	20000080 	.word	0x20000080
 800036c:	40013800 	.word	0x40013800

08000370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b088      	sub	sp, #32
 8000374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000376:	f107 0310 	add.w	r3, r7, #16
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000384:	4b23      	ldr	r3, [pc, #140]	; (8000414 <MX_GPIO_Init+0xa4>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a22      	ldr	r2, [pc, #136]	; (8000414 <MX_GPIO_Init+0xa4>)
 800038a:	f043 0320 	orr.w	r3, r3, #32
 800038e:	6193      	str	r3, [r2, #24]
 8000390:	4b20      	ldr	r3, [pc, #128]	; (8000414 <MX_GPIO_Init+0xa4>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	f003 0320 	and.w	r3, r3, #32
 8000398:	60fb      	str	r3, [r7, #12]
 800039a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039c:	4b1d      	ldr	r3, [pc, #116]	; (8000414 <MX_GPIO_Init+0xa4>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a1c      	ldr	r2, [pc, #112]	; (8000414 <MX_GPIO_Init+0xa4>)
 80003a2:	f043 0304 	orr.w	r3, r3, #4
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <MX_GPIO_Init+0xa4>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0304 	and.w	r3, r3, #4
 80003b0:	60bb      	str	r3, [r7, #8]
 80003b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b4:	4b17      	ldr	r3, [pc, #92]	; (8000414 <MX_GPIO_Init+0xa4>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a16      	ldr	r2, [pc, #88]	; (8000414 <MX_GPIO_Init+0xa4>)
 80003ba:	f043 0308 	orr.w	r3, r3, #8
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b14      	ldr	r3, [pc, #80]	; (8000414 <MX_GPIO_Init+0xa4>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0308 	and.w	r3, r3, #8
 80003c8:	607b      	str	r3, [r7, #4]
 80003ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A_Pin|B_Pin|C_Pin, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2138      	movs	r1, #56	; 0x38
 80003d0:	4811      	ldr	r0, [pc, #68]	; (8000418 <MX_GPIO_Init+0xa8>)
 80003d2:	f000 ffa1 	bl	8001318 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin;
 80003d6:	2338      	movs	r3, #56	; 0x38
 80003d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003da:	2301      	movs	r3, #1
 80003dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003de:	2300      	movs	r3, #0
 80003e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e2:	2302      	movs	r3, #2
 80003e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e6:	f107 0310 	add.w	r3, r7, #16
 80003ea:	4619      	mov	r1, r3
 80003ec:	480a      	ldr	r0, [pc, #40]	; (8000418 <MX_GPIO_Init+0xa8>)
 80003ee:	f000 fe0f 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP1_Pin DIP2_Pin DIP3_Pin */
  GPIO_InitStruct.Pin = DIP1_Pin|DIP2_Pin|DIP3_Pin;
 80003f2:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80003f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003f8:	2300      	movs	r3, #0
 80003fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fc:	2300      	movs	r3, #0
 80003fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000400:	f107 0310 	add.w	r3, r7, #16
 8000404:	4619      	mov	r1, r3
 8000406:	4805      	ldr	r0, [pc, #20]	; (800041c <MX_GPIO_Init+0xac>)
 8000408:	f000 fe02 	bl	8001010 <HAL_GPIO_Init>

}
 800040c:	bf00      	nop
 800040e:	3720      	adds	r7, #32
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	40021000 	.word	0x40021000
 8000418:	40010800 	.word	0x40010800
 800041c:	40010c00 	.word	0x40010c00

08000420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000424:	b672      	cpsid	i
}
 8000426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000428:	e7fe      	b.n	8000428 <Error_Handler+0x8>
	...

0800042c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000432:	4b13      	ldr	r3, [pc, #76]	; (8000480 <HAL_MspInit+0x54>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	4a12      	ldr	r2, [pc, #72]	; (8000480 <HAL_MspInit+0x54>)
 8000438:	f043 0301 	orr.w	r3, r3, #1
 800043c:	6193      	str	r3, [r2, #24]
 800043e:	4b10      	ldr	r3, [pc, #64]	; (8000480 <HAL_MspInit+0x54>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	f003 0301 	and.w	r3, r3, #1
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800044a:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <HAL_MspInit+0x54>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	4a0c      	ldr	r2, [pc, #48]	; (8000480 <HAL_MspInit+0x54>)
 8000450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000454:	61d3      	str	r3, [r2, #28]
 8000456:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <HAL_MspInit+0x54>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8000462:	4b08      	ldr	r3, [pc, #32]	; (8000484 <HAL_MspInit+0x58>)
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	4a04      	ldr	r2, [pc, #16]	; (8000484 <HAL_MspInit+0x58>)
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000476:	bf00      	nop
 8000478:	3714      	adds	r7, #20
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr
 8000480:	40021000 	.word	0x40021000
 8000484:	40010000 	.word	0x40010000

08000488 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b08a      	sub	sp, #40	; 0x28
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000490:	f107 0318 	add.w	r3, r7, #24
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	609a      	str	r2, [r3, #8]
 800049c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a1f      	ldr	r2, [pc, #124]	; (8000520 <HAL_ADC_MspInit+0x98>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d137      	bne.n	8000518 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004a8:	4b1e      	ldr	r3, [pc, #120]	; (8000524 <HAL_ADC_MspInit+0x9c>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a1d      	ldr	r2, [pc, #116]	; (8000524 <HAL_ADC_MspInit+0x9c>)
 80004ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b1b      	ldr	r3, [pc, #108]	; (8000524 <HAL_ADC_MspInit+0x9c>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80004bc:	617b      	str	r3, [r7, #20]
 80004be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c0:	4b18      	ldr	r3, [pc, #96]	; (8000524 <HAL_ADC_MspInit+0x9c>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a17      	ldr	r2, [pc, #92]	; (8000524 <HAL_ADC_MspInit+0x9c>)
 80004c6:	f043 0304 	orr.w	r3, r3, #4
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b15      	ldr	r3, [pc, #84]	; (8000524 <HAL_ADC_MspInit+0x9c>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0304 	and.w	r3, r3, #4
 80004d4:	613b      	str	r3, [r7, #16]
 80004d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d8:	4b12      	ldr	r3, [pc, #72]	; (8000524 <HAL_ADC_MspInit+0x9c>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a11      	ldr	r2, [pc, #68]	; (8000524 <HAL_ADC_MspInit+0x9c>)
 80004de:	f043 0308 	orr.w	r3, r3, #8
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <HAL_ADC_MspInit+0x9c>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f003 0308 	and.w	r3, r3, #8
 80004ec:	60fb      	str	r3, [r7, #12]
 80004ee:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004f0:	23c0      	movs	r3, #192	; 0xc0
 80004f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004f4:	2303      	movs	r3, #3
 80004f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f8:	f107 0318 	add.w	r3, r7, #24
 80004fc:	4619      	mov	r1, r3
 80004fe:	480a      	ldr	r0, [pc, #40]	; (8000528 <HAL_ADC_MspInit+0xa0>)
 8000500:	f000 fd86 	bl	8001010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000504:	2303      	movs	r3, #3
 8000506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000508:	2303      	movs	r3, #3
 800050a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050c:	f107 0318 	add.w	r3, r7, #24
 8000510:	4619      	mov	r1, r3
 8000512:	4806      	ldr	r0, [pc, #24]	; (800052c <HAL_ADC_MspInit+0xa4>)
 8000514:	f000 fd7c 	bl	8001010 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000518:	bf00      	nop
 800051a:	3728      	adds	r7, #40	; 0x28
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40012400 	.word	0x40012400
 8000524:	40021000 	.word	0x40021000
 8000528:	40010800 	.word	0x40010800
 800052c:	40010c00 	.word	0x40010c00

08000530 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a1c      	ldr	r2, [pc, #112]	; (80005bc <HAL_CAN_MspInit+0x8c>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d131      	bne.n	80005b4 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000550:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <HAL_CAN_MspInit+0x90>)
 8000552:	69db      	ldr	r3, [r3, #28]
 8000554:	4a1a      	ldr	r2, [pc, #104]	; (80005c0 <HAL_CAN_MspInit+0x90>)
 8000556:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800055a:	61d3      	str	r3, [r2, #28]
 800055c:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <HAL_CAN_MspInit+0x90>)
 800055e:	69db      	ldr	r3, [r3, #28]
 8000560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000568:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <HAL_CAN_MspInit+0x90>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	4a14      	ldr	r2, [pc, #80]	; (80005c0 <HAL_CAN_MspInit+0x90>)
 800056e:	f043 0304 	orr.w	r3, r3, #4
 8000572:	6193      	str	r3, [r2, #24]
 8000574:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <HAL_CAN_MspInit+0x90>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	f003 0304 	and.w	r3, r3, #4
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000580:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000584:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058e:	f107 0310 	add.w	r3, r7, #16
 8000592:	4619      	mov	r1, r3
 8000594:	480b      	ldr	r0, [pc, #44]	; (80005c4 <HAL_CAN_MspInit+0x94>)
 8000596:	f000 fd3b 	bl	8001010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800059a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a0:	2302      	movs	r3, #2
 80005a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a4:	2303      	movs	r3, #3
 80005a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a8:	f107 0310 	add.w	r3, r7, #16
 80005ac:	4619      	mov	r1, r3
 80005ae:	4805      	ldr	r0, [pc, #20]	; (80005c4 <HAL_CAN_MspInit+0x94>)
 80005b0:	f000 fd2e 	bl	8001010 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80005b4:	bf00      	nop
 80005b6:	3720      	adds	r7, #32
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40006400 	.word	0x40006400
 80005c0:	40021000 	.word	0x40021000
 80005c4:	40010800 	.word	0x40010800

080005c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a22      	ldr	r2, [pc, #136]	; (800066c <HAL_UART_MspInit+0xa4>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d13d      	bne.n	8000664 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005e8:	4b21      	ldr	r3, [pc, #132]	; (8000670 <HAL_UART_MspInit+0xa8>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a20      	ldr	r2, [pc, #128]	; (8000670 <HAL_UART_MspInit+0xa8>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <HAL_UART_MspInit+0xa8>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005fc:	613b      	str	r3, [r7, #16]
 80005fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <HAL_UART_MspInit+0xa8>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a1a      	ldr	r2, [pc, #104]	; (8000670 <HAL_UART_MspInit+0xa8>)
 8000606:	f043 0308 	orr.w	r3, r3, #8
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <HAL_UART_MspInit+0xa8>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0308 	and.w	r3, r3, #8
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000618:	2340      	movs	r3, #64	; 0x40
 800061a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061c:	2302      	movs	r3, #2
 800061e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000620:	2303      	movs	r3, #3
 8000622:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	4619      	mov	r1, r3
 800062a:	4812      	ldr	r0, [pc, #72]	; (8000674 <HAL_UART_MspInit+0xac>)
 800062c:	f000 fcf0 	bl	8001010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	4619      	mov	r1, r3
 8000642:	480c      	ldr	r0, [pc, #48]	; (8000674 <HAL_UART_MspInit+0xac>)
 8000644:	f000 fce4 	bl	8001010 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000648:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <HAL_UART_MspInit+0xb0>)
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
 800064e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000650:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
 8000656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000658:	f043 0304 	orr.w	r3, r3, #4
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
 800065e:	4a06      	ldr	r2, [pc, #24]	; (8000678 <HAL_UART_MspInit+0xb0>)
 8000660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000662:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000664:	bf00      	nop
 8000666:	3728      	adds	r7, #40	; 0x28
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40013800 	.word	0x40013800
 8000670:	40021000 	.word	0x40021000
 8000674:	40010c00 	.word	0x40010c00
 8000678:	40010000 	.word	0x40010000

0800067c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000680:	e7fe      	b.n	8000680 <NMI_Handler+0x4>

08000682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000686:	e7fe      	b.n	8000686 <HardFault_Handler+0x4>

08000688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800068c:	e7fe      	b.n	800068c <MemManage_Handler+0x4>

0800068e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000692:	e7fe      	b.n	8000692 <BusFault_Handler+0x4>

08000694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <UsageFault_Handler+0x4>

0800069a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr

080006a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr

080006b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr

080006be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c2:	f000 f875 	bl	80007b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}

080006ca <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
	...

080006d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d8:	480c      	ldr	r0, [pc, #48]	; (800070c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006da:	490d      	ldr	r1, [pc, #52]	; (8000710 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006dc:	4a0d      	ldr	r2, [pc, #52]	; (8000714 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e0:	e002      	b.n	80006e8 <LoopCopyDataInit>

080006e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e6:	3304      	adds	r3, #4

080006e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ec:	d3f9      	bcc.n	80006e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ee:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006f0:	4c0a      	ldr	r4, [pc, #40]	; (800071c <LoopFillZerobss+0x22>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f4:	e001      	b.n	80006fa <LoopFillZerobss>

080006f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f8:	3204      	adds	r2, #4

080006fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006fc:	d3fb      	bcc.n	80006f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006fe:	f7ff ffe4 	bl	80006ca <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000702:	f001 fbe7 	bl	8001ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000706:	f7ff fd21 	bl	800014c <main>
  bx lr
 800070a:	4770      	bx	lr
  ldr r0, =_sdata
 800070c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000710:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000714:	08001f74 	.word	0x08001f74
  ldr r2, =_sbss
 8000718:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800071c:	200000c8 	.word	0x200000c8

08000720 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000720:	e7fe      	b.n	8000720 <ADC1_2_IRQHandler>
	...

08000724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <HAL_Init+0x28>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a07      	ldr	r2, [pc, #28]	; (800074c <HAL_Init+0x28>)
 800072e:	f043 0310 	orr.w	r3, r3, #16
 8000732:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000734:	2003      	movs	r0, #3
 8000736:	f000 fc37 	bl	8000fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800073a:	200f      	movs	r0, #15
 800073c:	f000 f808 	bl	8000750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000740:	f7ff fe74 	bl	800042c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40022000 	.word	0x40022000

08000750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <HAL_InitTick+0x54>)
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <HAL_InitTick+0x58>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	4619      	mov	r1, r3
 8000762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000766:	fbb3 f3f1 	udiv	r3, r3, r1
 800076a:	fbb2 f3f3 	udiv	r3, r2, r3
 800076e:	4618      	mov	r0, r3
 8000770:	f000 fc41 	bl	8000ff6 <HAL_SYSTICK_Config>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800077a:	2301      	movs	r3, #1
 800077c:	e00e      	b.n	800079c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2b0f      	cmp	r3, #15
 8000782:	d80a      	bhi.n	800079a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000784:	2200      	movs	r2, #0
 8000786:	6879      	ldr	r1, [r7, #4]
 8000788:	f04f 30ff 	mov.w	r0, #4294967295
 800078c:	f000 fc17 	bl	8000fbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000790:	4a06      	ldr	r2, [pc, #24]	; (80007ac <HAL_InitTick+0x5c>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000796:	2300      	movs	r3, #0
 8000798:	e000      	b.n	800079c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800079a:	2301      	movs	r3, #1
}
 800079c:	4618      	mov	r0, r3
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000000 	.word	0x20000000
 80007a8:	20000008 	.word	0x20000008
 80007ac:	20000004 	.word	0x20000004

080007b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <HAL_IncTick+0x1c>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <HAL_IncTick+0x20>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4413      	add	r3, r2
 80007c0:	4a03      	ldr	r2, [pc, #12]	; (80007d0 <HAL_IncTick+0x20>)
 80007c2:	6013      	str	r3, [r2, #0]
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	20000008 	.word	0x20000008
 80007d0:	200000c4 	.word	0x200000c4

080007d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  return uwTick;
 80007d8:	4b02      	ldr	r3, [pc, #8]	; (80007e4 <HAL_GetTick+0x10>)
 80007da:	681b      	ldr	r3, [r3, #0]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr
 80007e4:	200000c4 	.word	0x200000c4

080007e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007f0:	f7ff fff0 	bl	80007d4 <HAL_GetTick>
 80007f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000800:	d005      	beq.n	800080e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <HAL_Delay+0x44>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	461a      	mov	r2, r3
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	4413      	add	r3, r2
 800080c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800080e:	bf00      	nop
 8000810:	f7ff ffe0 	bl	80007d4 <HAL_GetTick>
 8000814:	4602      	mov	r2, r0
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	1ad3      	subs	r3, r2, r3
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	429a      	cmp	r2, r3
 800081e:	d8f7      	bhi.n	8000810 <HAL_Delay+0x28>
  {
  }
}
 8000820:	bf00      	nop
 8000822:	bf00      	nop
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000008 	.word	0x20000008

08000830 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000838:	2300      	movs	r3, #0
 800083a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d101      	bne.n	8000852 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	e0be      	b.n	80009d0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	689b      	ldr	r3, [r3, #8]
 8000856:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800085c:	2b00      	cmp	r3, #0
 800085e:	d109      	bne.n	8000874 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2200      	movs	r2, #0
 8000864:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2200      	movs	r2, #0
 800086a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f7ff fe0a 	bl	8000488 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f000 f9ab 	bl	8000bd0 <ADC_ConversionStop_Disable>
 800087a:	4603      	mov	r3, r0
 800087c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000882:	f003 0310 	and.w	r3, r3, #16
 8000886:	2b00      	cmp	r3, #0
 8000888:	f040 8099 	bne.w	80009be <HAL_ADC_Init+0x18e>
 800088c:	7dfb      	ldrb	r3, [r7, #23]
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8095 	bne.w	80009be <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000898:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800089c:	f023 0302 	bic.w	r3, r3, #2
 80008a0:	f043 0202 	orr.w	r2, r3, #2
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008b0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	7b1b      	ldrb	r3, [r3, #12]
 80008b6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008b8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	4313      	orrs	r3, r2
 80008be:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008c8:	d003      	beq.n	80008d2 <HAL_ADC_Init+0xa2>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	689b      	ldr	r3, [r3, #8]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d102      	bne.n	80008d8 <HAL_ADC_Init+0xa8>
 80008d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008d6:	e000      	b.n	80008da <HAL_ADC_Init+0xaa>
 80008d8:	2300      	movs	r3, #0
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	4313      	orrs	r3, r2
 80008de:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	7d1b      	ldrb	r3, [r3, #20]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d119      	bne.n	800091c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	7b1b      	ldrb	r3, [r3, #12]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d109      	bne.n	8000904 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	3b01      	subs	r3, #1
 80008f6:	035a      	lsls	r2, r3, #13
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	e00b      	b.n	800091c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000908:	f043 0220 	orr.w	r2, r3, #32
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000914:	f043 0201 	orr.w	r2, r3, #1
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	430a      	orrs	r2, r1
 800092e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	689a      	ldr	r2, [r3, #8]
 8000936:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <HAL_ADC_Init+0x1a8>)
 8000938:	4013      	ands	r3, r2
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	6812      	ldr	r2, [r2, #0]
 800093e:	68b9      	ldr	r1, [r7, #8]
 8000940:	430b      	orrs	r3, r1
 8000942:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800094c:	d003      	beq.n	8000956 <HAL_ADC_Init+0x126>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d104      	bne.n	8000960 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	691b      	ldr	r3, [r3, #16]
 800095a:	3b01      	subs	r3, #1
 800095c:	051b      	lsls	r3, r3, #20
 800095e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000966:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	430a      	orrs	r2, r1
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	689a      	ldr	r2, [r3, #8]
 800097a:	4b18      	ldr	r3, [pc, #96]	; (80009dc <HAL_ADC_Init+0x1ac>)
 800097c:	4013      	ands	r3, r2
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	429a      	cmp	r2, r3
 8000982:	d10b      	bne.n	800099c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2200      	movs	r2, #0
 8000988:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800098e:	f023 0303 	bic.w	r3, r3, #3
 8000992:	f043 0201 	orr.w	r2, r3, #1
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800099a:	e018      	b.n	80009ce <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a0:	f023 0312 	bic.w	r3, r3, #18
 80009a4:	f043 0210 	orr.w	r2, r3, #16
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b0:	f043 0201 	orr.w	r2, r3, #1
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80009b8:	2301      	movs	r3, #1
 80009ba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009bc:	e007      	b.n	80009ce <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c2:	f043 0210 	orr.w	r2, r3, #16
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80009ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3718      	adds	r7, #24
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	ffe1f7fd 	.word	0xffe1f7fd
 80009dc:	ff1f0efe 	.word	0xff1f0efe

080009e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009ea:	2300      	movs	r3, #0
 80009ec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d101      	bne.n	8000a00 <HAL_ADC_ConfigChannel+0x20>
 80009fc:	2302      	movs	r3, #2
 80009fe:	e0dc      	b.n	8000bba <HAL_ADC_ConfigChannel+0x1da>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2201      	movs	r2, #1
 8000a04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	2b06      	cmp	r3, #6
 8000a0e:	d81c      	bhi.n	8000a4a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685a      	ldr	r2, [r3, #4]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	4413      	add	r3, r2
 8000a20:	3b05      	subs	r3, #5
 8000a22:	221f      	movs	r2, #31
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	4019      	ands	r1, r3
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	6818      	ldr	r0, [r3, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685a      	ldr	r2, [r3, #4]
 8000a34:	4613      	mov	r3, r2
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	4413      	add	r3, r2
 8000a3a:	3b05      	subs	r3, #5
 8000a3c:	fa00 f203 	lsl.w	r2, r0, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	430a      	orrs	r2, r1
 8000a46:	635a      	str	r2, [r3, #52]	; 0x34
 8000a48:	e03c      	b.n	8000ac4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	2b0c      	cmp	r3, #12
 8000a50:	d81c      	bhi.n	8000a8c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685a      	ldr	r2, [r3, #4]
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	4413      	add	r3, r2
 8000a62:	3b23      	subs	r3, #35	; 0x23
 8000a64:	221f      	movs	r2, #31
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	4019      	ands	r1, r3
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	6818      	ldr	r0, [r3, #0]
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685a      	ldr	r2, [r3, #4]
 8000a76:	4613      	mov	r3, r2
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	4413      	add	r3, r2
 8000a7c:	3b23      	subs	r3, #35	; 0x23
 8000a7e:	fa00 f203 	lsl.w	r2, r0, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	430a      	orrs	r2, r1
 8000a88:	631a      	str	r2, [r3, #48]	; 0x30
 8000a8a:	e01b      	b.n	8000ac4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685a      	ldr	r2, [r3, #4]
 8000a96:	4613      	mov	r3, r2
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	4413      	add	r3, r2
 8000a9c:	3b41      	subs	r3, #65	; 0x41
 8000a9e:	221f      	movs	r2, #31
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	4019      	ands	r1, r3
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	6818      	ldr	r0, [r3, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685a      	ldr	r2, [r3, #4]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	4413      	add	r3, r2
 8000ab6:	3b41      	subs	r3, #65	; 0x41
 8000ab8:	fa00 f203 	lsl.w	r2, r0, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b09      	cmp	r3, #9
 8000aca:	d91c      	bls.n	8000b06 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	68d9      	ldr	r1, [r3, #12]
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	4413      	add	r3, r2
 8000adc:	3b1e      	subs	r3, #30
 8000ade:	2207      	movs	r2, #7
 8000ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	4019      	ands	r1, r3
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	6898      	ldr	r0, [r3, #8]
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4613      	mov	r3, r2
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	4413      	add	r3, r2
 8000af6:	3b1e      	subs	r3, #30
 8000af8:	fa00 f203 	lsl.w	r2, r0, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	430a      	orrs	r2, r1
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	e019      	b.n	8000b3a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	6919      	ldr	r1, [r3, #16]
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	4613      	mov	r3, r2
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	4413      	add	r3, r2
 8000b16:	2207      	movs	r2, #7
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	4019      	ands	r1, r3
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	6898      	ldr	r0, [r3, #8]
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	4413      	add	r3, r2
 8000b2e:	fa00 f203 	lsl.w	r2, r0, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	430a      	orrs	r2, r1
 8000b38:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2b10      	cmp	r3, #16
 8000b40:	d003      	beq.n	8000b4a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b46:	2b11      	cmp	r3, #17
 8000b48:	d132      	bne.n	8000bb0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a1d      	ldr	r2, [pc, #116]	; (8000bc4 <HAL_ADC_ConfigChannel+0x1e4>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d125      	bne.n	8000ba0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d126      	bne.n	8000bb0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	689a      	ldr	r2, [r3, #8]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000b70:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b10      	cmp	r3, #16
 8000b78:	d11a      	bne.n	8000bb0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <HAL_ADC_ConfigChannel+0x1e8>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a13      	ldr	r2, [pc, #76]	; (8000bcc <HAL_ADC_ConfigChannel+0x1ec>)
 8000b80:	fba2 2303 	umull	r2, r3, r2, r3
 8000b84:	0c9a      	lsrs	r2, r3, #18
 8000b86:	4613      	mov	r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	4413      	add	r3, r2
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b90:	e002      	b.n	8000b98 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	3b01      	subs	r3, #1
 8000b96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1f9      	bne.n	8000b92 <HAL_ADC_ConfigChannel+0x1b2>
 8000b9e:	e007      	b.n	8000bb0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba4:	f043 0220 	orr.w	r2, r3, #32
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
 8000bae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr
 8000bc4:	40012400 	.word	0x40012400
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	431bde83 	.word	0x431bde83

08000bd0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d12e      	bne.n	8000c48 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	689a      	ldr	r2, [r3, #8]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f022 0201 	bic.w	r2, r2, #1
 8000bf8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000bfa:	f7ff fdeb 	bl	80007d4 <HAL_GetTick>
 8000bfe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000c00:	e01b      	b.n	8000c3a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000c02:	f7ff fde7 	bl	80007d4 <HAL_GetTick>
 8000c06:	4602      	mov	r2, r0
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	1ad3      	subs	r3, r2, r3
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d914      	bls.n	8000c3a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d10d      	bne.n	8000c3a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c22:	f043 0210 	orr.w	r2, r3, #16
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c2e:	f043 0201 	orr.w	r2, r3, #1
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e007      	b.n	8000c4a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d0dc      	beq.n	8000c02 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b084      	sub	sp, #16
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d101      	bne.n	8000c64 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	e0ed      	b.n	8000e40 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff fc5d 	bl	8000530 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f042 0201 	orr.w	r2, r2, #1
 8000c84:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c86:	f7ff fda5 	bl	80007d4 <HAL_GetTick>
 8000c8a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c8c:	e012      	b.n	8000cb4 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c8e:	f7ff fda1 	bl	80007d4 <HAL_GetTick>
 8000c92:	4602      	mov	r2, r0
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	2b0a      	cmp	r3, #10
 8000c9a:	d90b      	bls.n	8000cb4 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2205      	movs	r2, #5
 8000cac:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e0c5      	b.n	8000e40 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d0e5      	beq.n	8000c8e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f022 0202 	bic.w	r2, r2, #2
 8000cd0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cd2:	f7ff fd7f 	bl	80007d4 <HAL_GetTick>
 8000cd6:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cd8:	e012      	b.n	8000d00 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cda:	f7ff fd7b 	bl	80007d4 <HAL_GetTick>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	2b0a      	cmp	r3, #10
 8000ce6:	d90b      	bls.n	8000d00 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cec:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2205      	movs	r2, #5
 8000cf8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e09f      	b.n	8000e40 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d1e5      	bne.n	8000cda <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	7e1b      	ldrb	r3, [r3, #24]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d108      	bne.n	8000d28 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	e007      	b.n	8000d38 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d36:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	7e5b      	ldrb	r3, [r3, #25]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d108      	bne.n	8000d52 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	e007      	b.n	8000d62 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	7e9b      	ldrb	r3, [r3, #26]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d108      	bne.n	8000d7c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f042 0220 	orr.w	r2, r2, #32
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	e007      	b.n	8000d8c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f022 0220 	bic.w	r2, r2, #32
 8000d8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	7edb      	ldrb	r3, [r3, #27]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d108      	bne.n	8000da6 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f022 0210 	bic.w	r2, r2, #16
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	e007      	b.n	8000db6 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f042 0210 	orr.w	r2, r2, #16
 8000db4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	7f1b      	ldrb	r3, [r3, #28]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d108      	bne.n	8000dd0 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f042 0208 	orr.w	r2, r2, #8
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	e007      	b.n	8000de0 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 0208 	bic.w	r2, r2, #8
 8000dde:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	7f5b      	ldrb	r3, [r3, #29]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d108      	bne.n	8000dfa <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f042 0204 	orr.w	r2, r2, #4
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	e007      	b.n	8000e0a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f022 0204 	bic.w	r2, r2, #4
 8000e08:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689a      	ldr	r2, [r3, #8]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	431a      	orrs	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	691b      	ldr	r3, [r3, #16]
 8000e18:	431a      	orrs	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	695b      	ldr	r3, [r3, #20]
 8000e1e:	ea42 0103 	orr.w	r1, r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	1e5a      	subs	r2, r3, #1
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e3e:	2300      	movs	r3, #0
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e64:	4013      	ands	r3, r2
 8000e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7a:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	60d3      	str	r3, [r2, #12]
}
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	f003 0307 	and.w	r3, r3, #7
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db0a      	blt.n	8000ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	490c      	ldr	r1, [pc, #48]	; (8000ef8 <__NVIC_SetPriority+0x4c>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	0112      	lsls	r2, r2, #4
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	440b      	add	r3, r1
 8000ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed4:	e00a      	b.n	8000eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4908      	ldr	r1, [pc, #32]	; (8000efc <__NVIC_SetPriority+0x50>)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	3b04      	subs	r3, #4
 8000ee4:	0112      	lsls	r2, r2, #4
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	440b      	add	r3, r1
 8000eea:	761a      	strb	r2, [r3, #24]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f1c3 0307 	rsb	r3, r3, #7
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	bf28      	it	cs
 8000f1e:	2304      	movcs	r3, #4
 8000f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3304      	adds	r3, #4
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d902      	bls.n	8000f30 <NVIC_EncodePriority+0x30>
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3b03      	subs	r3, #3
 8000f2e:	e000      	b.n	8000f32 <NVIC_EncodePriority+0x32>
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	401a      	ands	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	4313      	orrs	r3, r2
         );
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3724      	adds	r7, #36	; 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr

08000f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f74:	d301      	bcc.n	8000f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f76:	2301      	movs	r3, #1
 8000f78:	e00f      	b.n	8000f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <SysTick_Config+0x40>)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f82:	210f      	movs	r1, #15
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295
 8000f88:	f7ff ff90 	bl	8000eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <SysTick_Config+0x40>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f92:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <SysTick_Config+0x40>)
 8000f94:	2207      	movs	r2, #7
 8000f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	e000e010 	.word	0xe000e010

08000fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ff49 	bl	8000e48 <__NVIC_SetPriorityGrouping>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b086      	sub	sp, #24
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
 8000fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd0:	f7ff ff5e 	bl	8000e90 <__NVIC_GetPriorityGrouping>
 8000fd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	68b9      	ldr	r1, [r7, #8]
 8000fda:	6978      	ldr	r0, [r7, #20]
 8000fdc:	f7ff ff90 	bl	8000f00 <NVIC_EncodePriority>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff5f 	bl	8000eac <__NVIC_SetPriority>
}
 8000fee:	bf00      	nop
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ffb0 	bl	8000f64 <SysTick_Config>
 8001004:	4603      	mov	r3, r0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001010:	b480      	push	{r7}
 8001012:	b08b      	sub	sp, #44	; 0x2c
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800101a:	2300      	movs	r3, #0
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001022:	e169      	b.n	80012f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001024:	2201      	movs	r2, #1
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	69fa      	ldr	r2, [r7, #28]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	429a      	cmp	r2, r3
 800103e:	f040 8158 	bne.w	80012f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	4a9a      	ldr	r2, [pc, #616]	; (80012b0 <HAL_GPIO_Init+0x2a0>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d05e      	beq.n	800110a <HAL_GPIO_Init+0xfa>
 800104c:	4a98      	ldr	r2, [pc, #608]	; (80012b0 <HAL_GPIO_Init+0x2a0>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d875      	bhi.n	800113e <HAL_GPIO_Init+0x12e>
 8001052:	4a98      	ldr	r2, [pc, #608]	; (80012b4 <HAL_GPIO_Init+0x2a4>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d058      	beq.n	800110a <HAL_GPIO_Init+0xfa>
 8001058:	4a96      	ldr	r2, [pc, #600]	; (80012b4 <HAL_GPIO_Init+0x2a4>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d86f      	bhi.n	800113e <HAL_GPIO_Init+0x12e>
 800105e:	4a96      	ldr	r2, [pc, #600]	; (80012b8 <HAL_GPIO_Init+0x2a8>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d052      	beq.n	800110a <HAL_GPIO_Init+0xfa>
 8001064:	4a94      	ldr	r2, [pc, #592]	; (80012b8 <HAL_GPIO_Init+0x2a8>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d869      	bhi.n	800113e <HAL_GPIO_Init+0x12e>
 800106a:	4a94      	ldr	r2, [pc, #592]	; (80012bc <HAL_GPIO_Init+0x2ac>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d04c      	beq.n	800110a <HAL_GPIO_Init+0xfa>
 8001070:	4a92      	ldr	r2, [pc, #584]	; (80012bc <HAL_GPIO_Init+0x2ac>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d863      	bhi.n	800113e <HAL_GPIO_Init+0x12e>
 8001076:	4a92      	ldr	r2, [pc, #584]	; (80012c0 <HAL_GPIO_Init+0x2b0>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d046      	beq.n	800110a <HAL_GPIO_Init+0xfa>
 800107c:	4a90      	ldr	r2, [pc, #576]	; (80012c0 <HAL_GPIO_Init+0x2b0>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d85d      	bhi.n	800113e <HAL_GPIO_Init+0x12e>
 8001082:	2b12      	cmp	r3, #18
 8001084:	d82a      	bhi.n	80010dc <HAL_GPIO_Init+0xcc>
 8001086:	2b12      	cmp	r3, #18
 8001088:	d859      	bhi.n	800113e <HAL_GPIO_Init+0x12e>
 800108a:	a201      	add	r2, pc, #4	; (adr r2, 8001090 <HAL_GPIO_Init+0x80>)
 800108c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001090:	0800110b 	.word	0x0800110b
 8001094:	080010e5 	.word	0x080010e5
 8001098:	080010f7 	.word	0x080010f7
 800109c:	08001139 	.word	0x08001139
 80010a0:	0800113f 	.word	0x0800113f
 80010a4:	0800113f 	.word	0x0800113f
 80010a8:	0800113f 	.word	0x0800113f
 80010ac:	0800113f 	.word	0x0800113f
 80010b0:	0800113f 	.word	0x0800113f
 80010b4:	0800113f 	.word	0x0800113f
 80010b8:	0800113f 	.word	0x0800113f
 80010bc:	0800113f 	.word	0x0800113f
 80010c0:	0800113f 	.word	0x0800113f
 80010c4:	0800113f 	.word	0x0800113f
 80010c8:	0800113f 	.word	0x0800113f
 80010cc:	0800113f 	.word	0x0800113f
 80010d0:	0800113f 	.word	0x0800113f
 80010d4:	080010ed 	.word	0x080010ed
 80010d8:	08001101 	.word	0x08001101
 80010dc:	4a79      	ldr	r2, [pc, #484]	; (80012c4 <HAL_GPIO_Init+0x2b4>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d013      	beq.n	800110a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010e2:	e02c      	b.n	800113e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	623b      	str	r3, [r7, #32]
          break;
 80010ea:	e029      	b.n	8001140 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	3304      	adds	r3, #4
 80010f2:	623b      	str	r3, [r7, #32]
          break;
 80010f4:	e024      	b.n	8001140 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	3308      	adds	r3, #8
 80010fc:	623b      	str	r3, [r7, #32]
          break;
 80010fe:	e01f      	b.n	8001140 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	330c      	adds	r3, #12
 8001106:	623b      	str	r3, [r7, #32]
          break;
 8001108:	e01a      	b.n	8001140 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d102      	bne.n	8001118 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001112:	2304      	movs	r3, #4
 8001114:	623b      	str	r3, [r7, #32]
          break;
 8001116:	e013      	b.n	8001140 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d105      	bne.n	800112c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001120:	2308      	movs	r3, #8
 8001122:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69fa      	ldr	r2, [r7, #28]
 8001128:	611a      	str	r2, [r3, #16]
          break;
 800112a:	e009      	b.n	8001140 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800112c:	2308      	movs	r3, #8
 800112e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	69fa      	ldr	r2, [r7, #28]
 8001134:	615a      	str	r2, [r3, #20]
          break;
 8001136:	e003      	b.n	8001140 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001138:	2300      	movs	r3, #0
 800113a:	623b      	str	r3, [r7, #32]
          break;
 800113c:	e000      	b.n	8001140 <HAL_GPIO_Init+0x130>
          break;
 800113e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	2bff      	cmp	r3, #255	; 0xff
 8001144:	d801      	bhi.n	800114a <HAL_GPIO_Init+0x13a>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	e001      	b.n	800114e <HAL_GPIO_Init+0x13e>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3304      	adds	r3, #4
 800114e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	2bff      	cmp	r3, #255	; 0xff
 8001154:	d802      	bhi.n	800115c <HAL_GPIO_Init+0x14c>
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	e002      	b.n	8001162 <HAL_GPIO_Init+0x152>
 800115c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115e:	3b08      	subs	r3, #8
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	210f      	movs	r1, #15
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	fa01 f303 	lsl.w	r3, r1, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	401a      	ands	r2, r3
 8001174:	6a39      	ldr	r1, [r7, #32]
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	fa01 f303 	lsl.w	r3, r1, r3
 800117c:	431a      	orrs	r2, r3
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 80b1 	beq.w	80012f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001190:	4b4d      	ldr	r3, [pc, #308]	; (80012c8 <HAL_GPIO_Init+0x2b8>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a4c      	ldr	r2, [pc, #304]	; (80012c8 <HAL_GPIO_Init+0x2b8>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b4a      	ldr	r3, [pc, #296]	; (80012c8 <HAL_GPIO_Init+0x2b8>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011a8:	4a48      	ldr	r2, [pc, #288]	; (80012cc <HAL_GPIO_Init+0x2bc>)
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	089b      	lsrs	r3, r3, #2
 80011ae:	3302      	adds	r3, #2
 80011b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	220f      	movs	r2, #15
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	4013      	ands	r3, r2
 80011ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a40      	ldr	r2, [pc, #256]	; (80012d0 <HAL_GPIO_Init+0x2c0>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d013      	beq.n	80011fc <HAL_GPIO_Init+0x1ec>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a3f      	ldr	r2, [pc, #252]	; (80012d4 <HAL_GPIO_Init+0x2c4>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d00d      	beq.n	80011f8 <HAL_GPIO_Init+0x1e8>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a3e      	ldr	r2, [pc, #248]	; (80012d8 <HAL_GPIO_Init+0x2c8>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d007      	beq.n	80011f4 <HAL_GPIO_Init+0x1e4>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a3d      	ldr	r2, [pc, #244]	; (80012dc <HAL_GPIO_Init+0x2cc>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d101      	bne.n	80011f0 <HAL_GPIO_Init+0x1e0>
 80011ec:	2303      	movs	r3, #3
 80011ee:	e006      	b.n	80011fe <HAL_GPIO_Init+0x1ee>
 80011f0:	2304      	movs	r3, #4
 80011f2:	e004      	b.n	80011fe <HAL_GPIO_Init+0x1ee>
 80011f4:	2302      	movs	r3, #2
 80011f6:	e002      	b.n	80011fe <HAL_GPIO_Init+0x1ee>
 80011f8:	2301      	movs	r3, #1
 80011fa:	e000      	b.n	80011fe <HAL_GPIO_Init+0x1ee>
 80011fc:	2300      	movs	r3, #0
 80011fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001200:	f002 0203 	and.w	r2, r2, #3
 8001204:	0092      	lsls	r2, r2, #2
 8001206:	4093      	lsls	r3, r2
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	4313      	orrs	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800120e:	492f      	ldr	r1, [pc, #188]	; (80012cc <HAL_GPIO_Init+0x2bc>)
 8001210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001212:	089b      	lsrs	r3, r3, #2
 8001214:	3302      	adds	r3, #2
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d006      	beq.n	8001236 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001228:	4b2d      	ldr	r3, [pc, #180]	; (80012e0 <HAL_GPIO_Init+0x2d0>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	492c      	ldr	r1, [pc, #176]	; (80012e0 <HAL_GPIO_Init+0x2d0>)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	600b      	str	r3, [r1, #0]
 8001234:	e006      	b.n	8001244 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001236:	4b2a      	ldr	r3, [pc, #168]	; (80012e0 <HAL_GPIO_Init+0x2d0>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	43db      	mvns	r3, r3
 800123e:	4928      	ldr	r1, [pc, #160]	; (80012e0 <HAL_GPIO_Init+0x2d0>)
 8001240:	4013      	ands	r3, r2
 8001242:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d006      	beq.n	800125e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001250:	4b23      	ldr	r3, [pc, #140]	; (80012e0 <HAL_GPIO_Init+0x2d0>)
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	4922      	ldr	r1, [pc, #136]	; (80012e0 <HAL_GPIO_Init+0x2d0>)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	4313      	orrs	r3, r2
 800125a:	604b      	str	r3, [r1, #4]
 800125c:	e006      	b.n	800126c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800125e:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <HAL_GPIO_Init+0x2d0>)
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	43db      	mvns	r3, r3
 8001266:	491e      	ldr	r1, [pc, #120]	; (80012e0 <HAL_GPIO_Init+0x2d0>)
 8001268:	4013      	ands	r3, r2
 800126a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d006      	beq.n	8001286 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001278:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <HAL_GPIO_Init+0x2d0>)
 800127a:	689a      	ldr	r2, [r3, #8]
 800127c:	4918      	ldr	r1, [pc, #96]	; (80012e0 <HAL_GPIO_Init+0x2d0>)
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	4313      	orrs	r3, r2
 8001282:	608b      	str	r3, [r1, #8]
 8001284:	e006      	b.n	8001294 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <HAL_GPIO_Init+0x2d0>)
 8001288:	689a      	ldr	r2, [r3, #8]
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	43db      	mvns	r3, r3
 800128e:	4914      	ldr	r1, [pc, #80]	; (80012e0 <HAL_GPIO_Init+0x2d0>)
 8001290:	4013      	ands	r3, r2
 8001292:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d021      	beq.n	80012e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <HAL_GPIO_Init+0x2d0>)
 80012a2:	68da      	ldr	r2, [r3, #12]
 80012a4:	490e      	ldr	r1, [pc, #56]	; (80012e0 <HAL_GPIO_Init+0x2d0>)
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	60cb      	str	r3, [r1, #12]
 80012ac:	e021      	b.n	80012f2 <HAL_GPIO_Init+0x2e2>
 80012ae:	bf00      	nop
 80012b0:	10320000 	.word	0x10320000
 80012b4:	10310000 	.word	0x10310000
 80012b8:	10220000 	.word	0x10220000
 80012bc:	10210000 	.word	0x10210000
 80012c0:	10120000 	.word	0x10120000
 80012c4:	10110000 	.word	0x10110000
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40010000 	.word	0x40010000
 80012d0:	40010800 	.word	0x40010800
 80012d4:	40010c00 	.word	0x40010c00
 80012d8:	40011000 	.word	0x40011000
 80012dc:	40011400 	.word	0x40011400
 80012e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012e4:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <HAL_GPIO_Init+0x304>)
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	4909      	ldr	r1, [pc, #36]	; (8001314 <HAL_GPIO_Init+0x304>)
 80012ee:	4013      	ands	r3, r2
 80012f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	3301      	adds	r3, #1
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	f47f ae8e 	bne.w	8001024 <HAL_GPIO_Init+0x14>
  }
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	372c      	adds	r7, #44	; 0x2c
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	40010400 	.word	0x40010400

08001318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	807b      	strh	r3, [r7, #2]
 8001324:	4613      	mov	r3, r2
 8001326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001328:	787b      	ldrb	r3, [r7, #1]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800132e:	887a      	ldrh	r2, [r7, #2]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001334:	e003      	b.n	800133e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001336:	887b      	ldrh	r3, [r7, #2]
 8001338:	041a      	lsls	r2, r3, #16
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	611a      	str	r2, [r3, #16]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800135a:	887a      	ldrh	r2, [r7, #2]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4013      	ands	r3, r2
 8001360:	041a      	lsls	r2, r3, #16
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	43d9      	mvns	r1, r3
 8001366:	887b      	ldrh	r3, [r7, #2]
 8001368:	400b      	ands	r3, r1
 800136a:	431a      	orrs	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	611a      	str	r2, [r3, #16]
}
 8001370:	bf00      	nop
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr
	...

0800137c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e272      	b.n	8001874 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 8087 	beq.w	80014aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800139c:	4b92      	ldr	r3, [pc, #584]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 030c 	and.w	r3, r3, #12
 80013a4:	2b04      	cmp	r3, #4
 80013a6:	d00c      	beq.n	80013c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013a8:	4b8f      	ldr	r3, [pc, #572]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 030c 	and.w	r3, r3, #12
 80013b0:	2b08      	cmp	r3, #8
 80013b2:	d112      	bne.n	80013da <HAL_RCC_OscConfig+0x5e>
 80013b4:	4b8c      	ldr	r3, [pc, #560]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c0:	d10b      	bne.n	80013da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c2:	4b89      	ldr	r3, [pc, #548]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d06c      	beq.n	80014a8 <HAL_RCC_OscConfig+0x12c>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d168      	bne.n	80014a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e24c      	b.n	8001874 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e2:	d106      	bne.n	80013f2 <HAL_RCC_OscConfig+0x76>
 80013e4:	4b80      	ldr	r3, [pc, #512]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a7f      	ldr	r2, [pc, #508]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 80013ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	e02e      	b.n	8001450 <HAL_RCC_OscConfig+0xd4>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10c      	bne.n	8001414 <HAL_RCC_OscConfig+0x98>
 80013fa:	4b7b      	ldr	r3, [pc, #492]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a7a      	ldr	r2, [pc, #488]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 8001400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	4b78      	ldr	r3, [pc, #480]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a77      	ldr	r2, [pc, #476]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 800140c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	e01d      	b.n	8001450 <HAL_RCC_OscConfig+0xd4>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800141c:	d10c      	bne.n	8001438 <HAL_RCC_OscConfig+0xbc>
 800141e:	4b72      	ldr	r3, [pc, #456]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a71      	ldr	r2, [pc, #452]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 8001424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	4b6f      	ldr	r3, [pc, #444]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a6e      	ldr	r2, [pc, #440]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 8001430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e00b      	b.n	8001450 <HAL_RCC_OscConfig+0xd4>
 8001438:	4b6b      	ldr	r3, [pc, #428]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a6a      	ldr	r2, [pc, #424]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 800143e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	4b68      	ldr	r3, [pc, #416]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a67      	ldr	r2, [pc, #412]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 800144a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800144e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d013      	beq.n	8001480 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001458:	f7ff f9bc 	bl	80007d4 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001460:	f7ff f9b8 	bl	80007d4 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b64      	cmp	r3, #100	; 0x64
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e200      	b.n	8001874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001472:	4b5d      	ldr	r3, [pc, #372]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0xe4>
 800147e:	e014      	b.n	80014aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001480:	f7ff f9a8 	bl	80007d4 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001488:	f7ff f9a4 	bl	80007d4 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b64      	cmp	r3, #100	; 0x64
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e1ec      	b.n	8001874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149a:	4b53      	ldr	r3, [pc, #332]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0x10c>
 80014a6:	e000      	b.n	80014aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d063      	beq.n	800157e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014b6:	4b4c      	ldr	r3, [pc, #304]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 030c 	and.w	r3, r3, #12
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00b      	beq.n	80014da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014c2:	4b49      	ldr	r3, [pc, #292]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 030c 	and.w	r3, r3, #12
 80014ca:	2b08      	cmp	r3, #8
 80014cc:	d11c      	bne.n	8001508 <HAL_RCC_OscConfig+0x18c>
 80014ce:	4b46      	ldr	r3, [pc, #280]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d116      	bne.n	8001508 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014da:	4b43      	ldr	r3, [pc, #268]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d005      	beq.n	80014f2 <HAL_RCC_OscConfig+0x176>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d001      	beq.n	80014f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e1c0      	b.n	8001874 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f2:	4b3d      	ldr	r3, [pc, #244]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	4939      	ldr	r1, [pc, #228]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 8001502:	4313      	orrs	r3, r2
 8001504:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001506:	e03a      	b.n	800157e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d020      	beq.n	8001552 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001510:	4b36      	ldr	r3, [pc, #216]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 8001512:	2201      	movs	r2, #1
 8001514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001516:	f7ff f95d 	bl	80007d4 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800151e:	f7ff f959 	bl	80007d4 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e1a1      	b.n	8001874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001530:	4b2d      	ldr	r3, [pc, #180]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0f0      	beq.n	800151e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153c:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	4927      	ldr	r1, [pc, #156]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 800154c:	4313      	orrs	r3, r2
 800154e:	600b      	str	r3, [r1, #0]
 8001550:	e015      	b.n	800157e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001552:	4b26      	ldr	r3, [pc, #152]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001558:	f7ff f93c 	bl	80007d4 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001560:	f7ff f938 	bl	80007d4 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e180      	b.n	8001874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001572:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	2b00      	cmp	r3, #0
 8001588:	d03a      	beq.n	8001600 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d019      	beq.n	80015c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <HAL_RCC_OscConfig+0x274>)
 8001594:	2201      	movs	r2, #1
 8001596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001598:	f7ff f91c 	bl	80007d4 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a0:	f7ff f918 	bl	80007d4 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e160      	b.n	8001874 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b2:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f0      	beq.n	80015a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015be:	2001      	movs	r0, #1
 80015c0:	f000 fad8 	bl	8001b74 <RCC_Delay>
 80015c4:	e01c      	b.n	8001600 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <HAL_RCC_OscConfig+0x274>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015cc:	f7ff f902 	bl	80007d4 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d2:	e00f      	b.n	80015f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d4:	f7ff f8fe 	bl	80007d4 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d908      	bls.n	80015f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e146      	b.n	8001874 <HAL_RCC_OscConfig+0x4f8>
 80015e6:	bf00      	nop
 80015e8:	40021000 	.word	0x40021000
 80015ec:	42420000 	.word	0x42420000
 80015f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f4:	4b92      	ldr	r3, [pc, #584]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1e9      	bne.n	80015d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	f000 80a6 	beq.w	800175a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800160e:	2300      	movs	r3, #0
 8001610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001612:	4b8b      	ldr	r3, [pc, #556]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10d      	bne.n	800163a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800161e:	4b88      	ldr	r3, [pc, #544]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	4a87      	ldr	r2, [pc, #540]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 8001624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001628:	61d3      	str	r3, [r2, #28]
 800162a:	4b85      	ldr	r3, [pc, #532]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001636:	2301      	movs	r3, #1
 8001638:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163a:	4b82      	ldr	r3, [pc, #520]	; (8001844 <HAL_RCC_OscConfig+0x4c8>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001642:	2b00      	cmp	r3, #0
 8001644:	d118      	bne.n	8001678 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001646:	4b7f      	ldr	r3, [pc, #508]	; (8001844 <HAL_RCC_OscConfig+0x4c8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a7e      	ldr	r2, [pc, #504]	; (8001844 <HAL_RCC_OscConfig+0x4c8>)
 800164c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001652:	f7ff f8bf 	bl	80007d4 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800165a:	f7ff f8bb 	bl	80007d4 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b64      	cmp	r3, #100	; 0x64
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e103      	b.n	8001874 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166c:	4b75      	ldr	r3, [pc, #468]	; (8001844 <HAL_RCC_OscConfig+0x4c8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0f0      	beq.n	800165a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d106      	bne.n	800168e <HAL_RCC_OscConfig+0x312>
 8001680:	4b6f      	ldr	r3, [pc, #444]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	4a6e      	ldr	r2, [pc, #440]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6213      	str	r3, [r2, #32]
 800168c:	e02d      	b.n	80016ea <HAL_RCC_OscConfig+0x36e>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10c      	bne.n	80016b0 <HAL_RCC_OscConfig+0x334>
 8001696:	4b6a      	ldr	r3, [pc, #424]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	4a69      	ldr	r2, [pc, #420]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 800169c:	f023 0301 	bic.w	r3, r3, #1
 80016a0:	6213      	str	r3, [r2, #32]
 80016a2:	4b67      	ldr	r3, [pc, #412]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	4a66      	ldr	r2, [pc, #408]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	f023 0304 	bic.w	r3, r3, #4
 80016ac:	6213      	str	r3, [r2, #32]
 80016ae:	e01c      	b.n	80016ea <HAL_RCC_OscConfig+0x36e>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	2b05      	cmp	r3, #5
 80016b6:	d10c      	bne.n	80016d2 <HAL_RCC_OscConfig+0x356>
 80016b8:	4b61      	ldr	r3, [pc, #388]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	4a60      	ldr	r2, [pc, #384]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 80016be:	f043 0304 	orr.w	r3, r3, #4
 80016c2:	6213      	str	r3, [r2, #32]
 80016c4:	4b5e      	ldr	r3, [pc, #376]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	4a5d      	ldr	r2, [pc, #372]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6213      	str	r3, [r2, #32]
 80016d0:	e00b      	b.n	80016ea <HAL_RCC_OscConfig+0x36e>
 80016d2:	4b5b      	ldr	r3, [pc, #364]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	4a5a      	ldr	r2, [pc, #360]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 80016d8:	f023 0301 	bic.w	r3, r3, #1
 80016dc:	6213      	str	r3, [r2, #32]
 80016de:	4b58      	ldr	r3, [pc, #352]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	4a57      	ldr	r2, [pc, #348]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 80016e4:	f023 0304 	bic.w	r3, r3, #4
 80016e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d015      	beq.n	800171e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f2:	f7ff f86f 	bl	80007d4 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f8:	e00a      	b.n	8001710 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fa:	f7ff f86b 	bl	80007d4 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	f241 3288 	movw	r2, #5000	; 0x1388
 8001708:	4293      	cmp	r3, r2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e0b1      	b.n	8001874 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001710:	4b4b      	ldr	r3, [pc, #300]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0ee      	beq.n	80016fa <HAL_RCC_OscConfig+0x37e>
 800171c:	e014      	b.n	8001748 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171e:	f7ff f859 	bl	80007d4 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001724:	e00a      	b.n	800173c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001726:	f7ff f855 	bl	80007d4 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	f241 3288 	movw	r2, #5000	; 0x1388
 8001734:	4293      	cmp	r3, r2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e09b      	b.n	8001874 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800173c:	4b40      	ldr	r3, [pc, #256]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1ee      	bne.n	8001726 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001748:	7dfb      	ldrb	r3, [r7, #23]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d105      	bne.n	800175a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800174e:	4b3c      	ldr	r3, [pc, #240]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	4a3b      	ldr	r2, [pc, #236]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 8001754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001758:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 8087 	beq.w	8001872 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001764:	4b36      	ldr	r3, [pc, #216]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 030c 	and.w	r3, r3, #12
 800176c:	2b08      	cmp	r3, #8
 800176e:	d061      	beq.n	8001834 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69db      	ldr	r3, [r3, #28]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d146      	bne.n	8001806 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001778:	4b33      	ldr	r3, [pc, #204]	; (8001848 <HAL_RCC_OscConfig+0x4cc>)
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177e:	f7ff f829 	bl	80007d4 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001786:	f7ff f825 	bl	80007d4 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e06d      	b.n	8001874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001798:	4b29      	ldr	r3, [pc, #164]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1f0      	bne.n	8001786 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ac:	d108      	bne.n	80017c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017ae:	4b24      	ldr	r3, [pc, #144]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	4921      	ldr	r1, [pc, #132]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017c0:	4b1f      	ldr	r3, [pc, #124]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a19      	ldr	r1, [r3, #32]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	430b      	orrs	r3, r1
 80017d2:	491b      	ldr	r1, [pc, #108]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017d8:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <HAL_RCC_OscConfig+0x4cc>)
 80017da:	2201      	movs	r2, #1
 80017dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017de:	f7fe fff9 	bl	80007d4 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e6:	f7fe fff5 	bl	80007d4 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e03d      	b.n	8001874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x46a>
 8001804:	e035      	b.n	8001872 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <HAL_RCC_OscConfig+0x4cc>)
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7fe ffe2 	bl	80007d4 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001814:	f7fe ffde 	bl	80007d4 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e026      	b.n	8001874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_RCC_OscConfig+0x4c4>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x498>
 8001832:	e01e      	b.n	8001872 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d107      	bne.n	800184c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e019      	b.n	8001874 <HAL_RCC_OscConfig+0x4f8>
 8001840:	40021000 	.word	0x40021000
 8001844:	40007000 	.word	0x40007000
 8001848:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_RCC_OscConfig+0x500>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a1b      	ldr	r3, [r3, #32]
 800185c:	429a      	cmp	r2, r3
 800185e:	d106      	bne.n	800186e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800186a:	429a      	cmp	r2, r3
 800186c:	d001      	beq.n	8001872 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40021000 	.word	0x40021000

08001880 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e0d0      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001894:	4b6a      	ldr	r3, [pc, #424]	; (8001a40 <HAL_RCC_ClockConfig+0x1c0>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0307 	and.w	r3, r3, #7
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d910      	bls.n	80018c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a2:	4b67      	ldr	r3, [pc, #412]	; (8001a40 <HAL_RCC_ClockConfig+0x1c0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f023 0207 	bic.w	r2, r3, #7
 80018aa:	4965      	ldr	r1, [pc, #404]	; (8001a40 <HAL_RCC_ClockConfig+0x1c0>)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b2:	4b63      	ldr	r3, [pc, #396]	; (8001a40 <HAL_RCC_ClockConfig+0x1c0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d001      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0b8      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d020      	beq.n	8001912 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018dc:	4b59      	ldr	r3, [pc, #356]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	4a58      	ldr	r2, [pc, #352]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018f4:	4b53      	ldr	r3, [pc, #332]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	4a52      	ldr	r2, [pc, #328]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 80018fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001900:	4b50      	ldr	r3, [pc, #320]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	494d      	ldr	r1, [pc, #308]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	4313      	orrs	r3, r2
 8001910:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d040      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d107      	bne.n	8001936 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	4b47      	ldr	r3, [pc, #284]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d115      	bne.n	800195e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e07f      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d107      	bne.n	800194e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800193e:	4b41      	ldr	r3, [pc, #260]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d109      	bne.n	800195e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e073      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800194e:	4b3d      	ldr	r3, [pc, #244]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e06b      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800195e:	4b39      	ldr	r3, [pc, #228]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f023 0203 	bic.w	r2, r3, #3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	4936      	ldr	r1, [pc, #216]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 800196c:	4313      	orrs	r3, r2
 800196e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001970:	f7fe ff30 	bl	80007d4 <HAL_GetTick>
 8001974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001976:	e00a      	b.n	800198e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001978:	f7fe ff2c 	bl	80007d4 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	f241 3288 	movw	r2, #5000	; 0x1388
 8001986:	4293      	cmp	r3, r2
 8001988:	d901      	bls.n	800198e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e053      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198e:	4b2d      	ldr	r3, [pc, #180]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 020c 	and.w	r2, r3, #12
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	429a      	cmp	r2, r3
 800199e:	d1eb      	bne.n	8001978 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019a0:	4b27      	ldr	r3, [pc, #156]	; (8001a40 <HAL_RCC_ClockConfig+0x1c0>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d210      	bcs.n	80019d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ae:	4b24      	ldr	r3, [pc, #144]	; (8001a40 <HAL_RCC_ClockConfig+0x1c0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f023 0207 	bic.w	r2, r3, #7
 80019b6:	4922      	ldr	r1, [pc, #136]	; (8001a40 <HAL_RCC_ClockConfig+0x1c0>)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019be:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <HAL_RCC_ClockConfig+0x1c0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d001      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e032      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d008      	beq.n	80019ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019dc:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	4916      	ldr	r1, [pc, #88]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d009      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	490e      	ldr	r1, [pc, #56]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a0e:	f000 f821 	bl	8001a54 <HAL_RCC_GetSysClockFreq>
 8001a12:	4602      	mov	r2, r0
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	091b      	lsrs	r3, r3, #4
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	490a      	ldr	r1, [pc, #40]	; (8001a48 <HAL_RCC_ClockConfig+0x1c8>)
 8001a20:	5ccb      	ldrb	r3, [r1, r3]
 8001a22:	fa22 f303 	lsr.w	r3, r2, r3
 8001a26:	4a09      	ldr	r2, [pc, #36]	; (8001a4c <HAL_RCC_ClockConfig+0x1cc>)
 8001a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <HAL_RCC_ClockConfig+0x1d0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fe8e 	bl	8000750 <HAL_InitTick>

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40022000 	.word	0x40022000
 8001a44:	40021000 	.word	0x40021000
 8001a48:	08001f54 	.word	0x08001f54
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	20000004 	.word	0x20000004

08001a54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a54:	b490      	push	{r4, r7}
 8001a56:	b08a      	sub	sp, #40	; 0x28
 8001a58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a5a:	4b29      	ldr	r3, [pc, #164]	; (8001b00 <HAL_RCC_GetSysClockFreq+0xac>)
 8001a5c:	1d3c      	adds	r4, r7, #4
 8001a5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a64:	f240 2301 	movw	r3, #513	; 0x201
 8001a68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61bb      	str	r3, [r7, #24]
 8001a72:	2300      	movs	r3, #0
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a7e:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f003 030c 	and.w	r3, r3, #12
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d002      	beq.n	8001a94 <HAL_RCC_GetSysClockFreq+0x40>
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	d003      	beq.n	8001a9a <HAL_RCC_GetSysClockFreq+0x46>
 8001a92:	e02b      	b.n	8001aec <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a94:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a96:	623b      	str	r3, [r7, #32]
      break;
 8001a98:	e02b      	b.n	8001af2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	0c9b      	lsrs	r3, r3, #18
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	3328      	adds	r3, #40	; 0x28
 8001aa4:	443b      	add	r3, r7
 8001aa6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001aaa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d012      	beq.n	8001adc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ab6:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	0c5b      	lsrs	r3, r3, #17
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	3328      	adds	r3, #40	; 0x28
 8001ac2:	443b      	add	r3, r7
 8001ac4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ac8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	4a0e      	ldr	r2, [pc, #56]	; (8001b08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ace:	fb03 f202 	mul.w	r2, r3, r2
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8001ada:	e004      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ae0:	fb02 f303 	mul.w	r3, r2, r3
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	623b      	str	r3, [r7, #32]
      break;
 8001aea:	e002      	b.n	8001af2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001aee:	623b      	str	r3, [r7, #32]
      break;
 8001af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001af2:	6a3b      	ldr	r3, [r7, #32]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3728      	adds	r7, #40	; 0x28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc90      	pop	{r4, r7}
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	08001f44 	.word	0x08001f44
 8001b04:	40021000 	.word	0x40021000
 8001b08:	007a1200 	.word	0x007a1200
 8001b0c:	003d0900 	.word	0x003d0900

08001b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b14:	4b02      	ldr	r3, [pc, #8]	; (8001b20 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	20000000 	.word	0x20000000

08001b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b28:	f7ff fff2 	bl	8001b10 <HAL_RCC_GetHCLKFreq>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	0a1b      	lsrs	r3, r3, #8
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	4903      	ldr	r1, [pc, #12]	; (8001b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b3a:	5ccb      	ldrb	r3, [r1, r3]
 8001b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40021000 	.word	0x40021000
 8001b48:	08001f64 	.word	0x08001f64

08001b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b50:	f7ff ffde 	bl	8001b10 <HAL_RCC_GetHCLKFreq>
 8001b54:	4602      	mov	r2, r0
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	0adb      	lsrs	r3, r3, #11
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	4903      	ldr	r1, [pc, #12]	; (8001b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b62:	5ccb      	ldrb	r3, [r1, r3]
 8001b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	08001f64 	.word	0x08001f64

08001b74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <RCC_Delay+0x34>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <RCC_Delay+0x38>)
 8001b82:	fba2 2303 	umull	r2, r3, r2, r3
 8001b86:	0a5b      	lsrs	r3, r3, #9
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	fb02 f303 	mul.w	r3, r2, r3
 8001b8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b90:	bf00      	nop
  }
  while (Delay --);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	1e5a      	subs	r2, r3, #1
 8001b96:	60fa      	str	r2, [r7, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f9      	bne.n	8001b90 <RCC_Delay+0x1c>
}
 8001b9c:	bf00      	nop
 8001b9e:	bf00      	nop
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr
 8001ba8:	20000000 	.word	0x20000000
 8001bac:	10624dd3 	.word	0x10624dd3

08001bb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d07d      	beq.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bd0:	4b4f      	ldr	r3, [pc, #316]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d10d      	bne.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bdc:	4b4c      	ldr	r3, [pc, #304]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	4a4b      	ldr	r2, [pc, #300]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be6:	61d3      	str	r3, [r2, #28]
 8001be8:	4b49      	ldr	r3, [pc, #292]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf8:	4b46      	ldr	r3, [pc, #280]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d118      	bne.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c04:	4b43      	ldr	r3, [pc, #268]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a42      	ldr	r2, [pc, #264]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c10:	f7fe fde0 	bl	80007d4 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c16:	e008      	b.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c18:	f7fe fddc 	bl	80007d4 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b64      	cmp	r3, #100	; 0x64
 8001c24:	d901      	bls.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e06d      	b.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2a:	4b3a      	ldr	r3, [pc, #232]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f0      	beq.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c36:	4b36      	ldr	r3, [pc, #216]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c3e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d02e      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d027      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c54:	4b2e      	ldr	r3, [pc, #184]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c5c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c5e:	4b2e      	ldr	r3, [pc, #184]	; (8001d18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c64:	4b2c      	ldr	r3, [pc, #176]	; (8001d18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001c6a:	4a29      	ldr	r2, [pc, #164]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d014      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7a:	f7fe fdab 	bl	80007d4 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c80:	e00a      	b.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c82:	f7fe fda7 	bl	80007d4 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e036      	b.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c98:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0ee      	beq.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ca4:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	4917      	ldr	r1, [pc, #92]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cb6:	7dfb      	ldrb	r3, [r7, #23]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d105      	bne.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cbc:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	4a13      	ldr	r2, [pc, #76]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d008      	beq.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001cd4:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	490b      	ldr	r1, [pc, #44]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0310 	and.w	r3, r3, #16
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d008      	beq.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001cf2:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	4904      	ldr	r1, [pc, #16]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40007000 	.word	0x40007000
 8001d18:	42420440 	.word	0x42420440

08001d1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e03f      	b.n	8001dae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d106      	bne.n	8001d48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7fe fc40 	bl	80005c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2224      	movs	r2, #36	; 0x24
 8001d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f829 	bl	8001db8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	691a      	ldr	r2, [r3, #16]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	695a      	ldr	r2, [r3, #20]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68da      	ldr	r2, [r3, #12]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2220      	movs	r2, #32
 8001da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2220      	movs	r2, #32
 8001da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001df2:	f023 030c 	bic.w	r3, r3, #12
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6812      	ldr	r2, [r2, #0]
 8001dfa:	68b9      	ldr	r1, [r7, #8]
 8001dfc:	430b      	orrs	r3, r1
 8001dfe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	699a      	ldr	r2, [r3, #24]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a2c      	ldr	r2, [pc, #176]	; (8001ecc <UART_SetConfig+0x114>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d103      	bne.n	8001e28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e20:	f7ff fe94 	bl	8001b4c <HAL_RCC_GetPCLK2Freq>
 8001e24:	60f8      	str	r0, [r7, #12]
 8001e26:	e002      	b.n	8001e2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e28:	f7ff fe7c 	bl	8001b24 <HAL_RCC_GetPCLK1Freq>
 8001e2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	009a      	lsls	r2, r3, #2
 8001e38:	441a      	add	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e44:	4a22      	ldr	r2, [pc, #136]	; (8001ed0 <UART_SetConfig+0x118>)
 8001e46:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	0119      	lsls	r1, r3, #4
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	009a      	lsls	r2, r3, #2
 8001e58:	441a      	add	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e64:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <UART_SetConfig+0x118>)
 8001e66:	fba3 0302 	umull	r0, r3, r3, r2
 8001e6a:	095b      	lsrs	r3, r3, #5
 8001e6c:	2064      	movs	r0, #100	; 0x64
 8001e6e:	fb00 f303 	mul.w	r3, r0, r3
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	011b      	lsls	r3, r3, #4
 8001e76:	3332      	adds	r3, #50	; 0x32
 8001e78:	4a15      	ldr	r2, [pc, #84]	; (8001ed0 <UART_SetConfig+0x118>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	095b      	lsrs	r3, r3, #5
 8001e80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e84:	4419      	add	r1, r3
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009a      	lsls	r2, r3, #2
 8001e90:	441a      	add	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <UART_SetConfig+0x118>)
 8001e9e:	fba3 0302 	umull	r0, r3, r3, r2
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	2064      	movs	r0, #100	; 0x64
 8001ea6:	fb00 f303 	mul.w	r3, r0, r3
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	3332      	adds	r3, #50	; 0x32
 8001eb0:	4a07      	ldr	r2, [pc, #28]	; (8001ed0 <UART_SetConfig+0x118>)
 8001eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb6:	095b      	lsrs	r3, r3, #5
 8001eb8:	f003 020f 	and.w	r2, r3, #15
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	440a      	add	r2, r1
 8001ec2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001ec4:	bf00      	nop
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40013800 	.word	0x40013800
 8001ed0:	51eb851f 	.word	0x51eb851f

08001ed4 <__libc_init_array>:
 8001ed4:	b570      	push	{r4, r5, r6, lr}
 8001ed6:	2600      	movs	r6, #0
 8001ed8:	4d0c      	ldr	r5, [pc, #48]	; (8001f0c <__libc_init_array+0x38>)
 8001eda:	4c0d      	ldr	r4, [pc, #52]	; (8001f10 <__libc_init_array+0x3c>)
 8001edc:	1b64      	subs	r4, r4, r5
 8001ede:	10a4      	asrs	r4, r4, #2
 8001ee0:	42a6      	cmp	r6, r4
 8001ee2:	d109      	bne.n	8001ef8 <__libc_init_array+0x24>
 8001ee4:	f000 f822 	bl	8001f2c <_init>
 8001ee8:	2600      	movs	r6, #0
 8001eea:	4d0a      	ldr	r5, [pc, #40]	; (8001f14 <__libc_init_array+0x40>)
 8001eec:	4c0a      	ldr	r4, [pc, #40]	; (8001f18 <__libc_init_array+0x44>)
 8001eee:	1b64      	subs	r4, r4, r5
 8001ef0:	10a4      	asrs	r4, r4, #2
 8001ef2:	42a6      	cmp	r6, r4
 8001ef4:	d105      	bne.n	8001f02 <__libc_init_array+0x2e>
 8001ef6:	bd70      	pop	{r4, r5, r6, pc}
 8001ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001efc:	4798      	blx	r3
 8001efe:	3601      	adds	r6, #1
 8001f00:	e7ee      	b.n	8001ee0 <__libc_init_array+0xc>
 8001f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f06:	4798      	blx	r3
 8001f08:	3601      	adds	r6, #1
 8001f0a:	e7f2      	b.n	8001ef2 <__libc_init_array+0x1e>
 8001f0c:	08001f6c 	.word	0x08001f6c
 8001f10:	08001f6c 	.word	0x08001f6c
 8001f14:	08001f6c 	.word	0x08001f6c
 8001f18:	08001f70 	.word	0x08001f70

08001f1c <memset>:
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	4402      	add	r2, r0
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d100      	bne.n	8001f26 <memset+0xa>
 8001f24:	4770      	bx	lr
 8001f26:	f803 1b01 	strb.w	r1, [r3], #1
 8001f2a:	e7f9      	b.n	8001f20 <memset+0x4>

08001f2c <_init>:
 8001f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f2e:	bf00      	nop
 8001f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f32:	bc08      	pop	{r3}
 8001f34:	469e      	mov	lr, r3
 8001f36:	4770      	bx	lr

08001f38 <_fini>:
 8001f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f3a:	bf00      	nop
 8001f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f3e:	bc08      	pop	{r3}
 8001f40:	469e      	mov	lr, r3
 8001f42:	4770      	bx	lr
